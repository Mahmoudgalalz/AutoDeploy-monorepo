version: 2.1

orbs:
  slack: circleci/slack@4.12.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        description: The workflow ID to use to find the back-end and front-end stacks.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying back-end and front-end stacks for workflow ID << parameters.workflow-id >>"
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow-id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow-id >>
            aws s3 rm s3://udapeople-<< parameters.workflow-id >> --recursive
            aws s3 rb s3://udapeople-<< parameters.workflow-id >> --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end tests
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end tests
          command: |
            cd backend
            npm i
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infra:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Deploy backend infrastructure or checking if it exists
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
      - run:
          name: Deploy frontend infrastructure or checking if it exists
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \

  config-infra:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["aa:bb:96:c7:04:5b:d3:7e:d4:60:9a:24:c6:9e:74:ae"]
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install tar
            sudo apt install gzip
            pip3 install --user ansible
            pip3 install awscli
            
      - run:
          name: get The backend server ip
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> inventory.txt 
            cat inventory.txt
      - run:
          name: Configure backend infrastructure
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
          channel: '#cicd-alerts'

  run-migration:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Migration
          command: |
            cd backend
            cat .env
            npm i
            npm run migrations > migration_dump.log
      - run:
          name: Check if migration is successful
          command: |
            cd backend
            if grep -q "successfully" ./backend/migration_dump.log; then
              echo "Migration successful"
              curl https://kvdb.io/UieMt2AAJFwXs3CFpSvbva/migration-${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            else
              echo "Migration failed"
              exit 1
            fi

  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          context: slack-secrets
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infra:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: master
      - config-infra:
          requires:
            - deploy-infra
      - run-migration:
          requires:
            - config-infra
