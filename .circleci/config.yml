version: 2.1

orbs:
  slack: circleci/slack@4.12.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        description: The workflow ID to use to find the back-end and front-end stacks.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying back-end and front-end stacks for workflow ID << parameters.workflow-id >>"
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow-id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow-id >>
            aws s3 rm s3://udapeople-<< parameters.workflow-id >> --recursive
            aws s3 rb s3://udapeople-<< parameters.workflow-id >> --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        description: The workflow ID to find the last successful migration.    
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            if [[ $(curl --insecure https://kvdb.io/UieMt2AAJFwXs3CFpSvbva/migration-<< parameters.workflow_id >>) == 1 ]]; 
            then
               cd ~/project/backend
               npm install
               npm run migrate:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end tests
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end tests
          command: |
            cd backend
            npm i
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infra:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Deploy backend infrastructure or checking if it exists
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
      - run:
          name: Deploy frontend infrastructure or checking if it exists
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \

  config-infra:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["aa:bb:96:c7:04:5b:d3:7e:d4:60:9a:24:c6:9e:74:ae"]
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install tar
            sudo apt install gzip
            pip3 install --user ansible
            pip3 install awscli
            
      - run:
          name: get The backend server ip
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> inventory.txt 
            cat inventory.txt
      - run:
          name: Configure backend infrastructure
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
          channel: '#cicd-alerts'

  run-migration:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      
      - run: 
          name: run migration
          command: |
            cd backend
            npm i
            npm run migrations > migrations_dump.log
      - run:
          name: Check if migration is successful
          command: |
            cd backend
            if grep -q "ts-node" ~/project/backend/migrations_dump.log; then
              echo "Migration successful"
              curl -k https://kvdb.io/UieMt2AAJFwXs3CFpSvbva/migration-${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            else
              echo "Migration failed"
              exit 1
            fi
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]  
      - run:
          name: install dependencies
          command: |
            sudo apt update
            sudo apt install awscli
      - run:
          name: Get backend server ip
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API URL= ${API_URL}"
            echo API_URL=${API_URL} >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend
          command: |
            cd frontend
            npm i
            npm run build
            tar -czvf artifact-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: migration-${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-backend:
    docker:
      - image: python:3.8-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["aa:bb:96:c7:04:5b:d3:7e:d4:60:9a:24:c6:9e:74:ae"]
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/project
      - run:
          name: install dependencies
          command: |
            apk add --update ansible
            apk add curl
            pip3 install awscli
      - run:
          name: get backend ip
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt 
            cat .circleci/ansible/inventory.txt
      
      - run:
          name: archive artifacts of backend
          command: |
            tar -czf artifact.tar.gz ./backend
            cp ./artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: deploy backend
          command: |
            cd .circleci/ansible
            echo "Content of inventory.txt"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: migration-${CIRCLE_WORKFLOW_ID:0:7}
  
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API URL= ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo "Smoke test passed"
              return 0
            else
              echo "Smoke test failed"
              exit 1
            fi
      - run:
          name: front-end smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Smoke test passed"
              # change this to 0 to after fail
              return 1
            else
              echo "Smoke test failed"
              exit 1
            fi
      - slack/notify:
          event: fail
          template: failure_tagged_deploy_1
          channel: '#cicd-alerts'
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: migration-${CIRCLE_WORKFLOW_ID:0:7}
  
workflows:
  default:
    jobs:
      - build-frontend:
          filters:
            branches:
              only: master
      - build-backend:
          filters:
            branches:
              only: master
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          context: slack-secrets
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infra:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: master
      - config-infra:
          requires:
            - deploy-infra
      - run-migration:
          requires:
            - config-infra
      - deploy-backend:
          requires:
            - run-migration
      - deploy-frontend:
          requires:
            - run-migration
            - deploy-backend
      - smoke-test:
          requires:
            - deploy-frontend
            - deploy-backend